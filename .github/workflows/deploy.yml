name: Deploy

on:
  push:
    branches:
      - main
    # tags:
    #   - 'v*'

env:
  PROJECT_NAME: itaxotools-mafftpy
  ARTIFACT_DISTRIBUTIONS: itaxotools-mafftpy-distributions


jobs:

  build-wheels:
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-22.04, windows-2022, macos-13]
        os: [ubuntu-22.04, macos-13]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686 *-musllinux_*"
          CIBW_ARCHS_MACOS: "auto64 arm64"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_DISTRIBUTIONS }}-${{ runner.os }}
          path: ./wheelhouse/*.whl


  fuse-wheels:
    name: Fuse macOS wheels
    runs-on: macos-latest
    needs: build-wheels

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_DISTRIBUTIONS }}-${{ runner.os }}
          path: wheelhouse

      - name: Create universal2 wheels
        run: |
          pip install delocate
          python tools/fuse-wheels.py

      - name: Upload universal2 wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_DISTRIBUTIONS }}-${{ runner.os }}-fused
          path: wheelhouse/*universal2.whl


  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_DISTRIBUTIONS }}-source
          path: dist/*.tar.gz


  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs:
      - build-wheels
      - build-sdist
      - fuse-wheels

    environment:
        name: testpypi
        url: https://test.pypi.org/p/${{ env.PROJECT_NAME }}

    permissions:
      id-token: write

    steps:
      - name: Auto-fail
        run: exit 1

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.ARTIFACT_DISTRIBUTIONS }}-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true


  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs:
      - publish-to-testpypi

    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PROJECT_NAME }}

    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.ARTIFACT_DISTRIBUTIONS }}-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true


  draft-github-release:
    name: Draft a GitHub Release
    runs-on: ubuntu-latest
    needs:
      - publish-to-testpypi

    environment:
      name: github
      url: ${{ github.server_url }}/${{ github.repository }}/releases

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.ARTIFACT_DISTRIBUTIONS }}-*
          merge-multiple: true
          path: dist/

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --generate-notes
          --draft

      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
